'''
File: HW_1_Q_2.py

Class: PLS 481, Spring 2025

Author: Ruta Rezene

Purpose: I start by utilized lecture code of 200×200 grid where every cell is initially set 
to 0. This grid is my “canvas” where I track where the walkers have been. Each 
cell can later hold a value to tell me if it was visited by Walker 1 (
set to 1), Walker 2 (set to 2), or by both (set to 3). I also initialize a 
counter --> count, which will keep track of every time one walker crosses 
over the path that the other walker has already taken. ext, I generate two 
walkers. Their starting positions are chosen at random from a small region 
(rows and columns roughly between 90 and 100). This isn’t random over the 
entire grid which was actually a deliberate choice to start them close together 
so that interactions occur more frequently (and so that we dont waste our time). 
I made Walker 1 and 2 their own entity so that its easier to distinguish as they wander.  

I then set up the visualization which lets for the grid and the evolving 
paths of the walkers in real time be shown. For movement, I define four possible steps: 
left, down, right, and up. In the main simulation loop (inside the run() function), 
I let each walker move one step at a time. For Walker 1, I randomly pick one of 
those steps and compute its new position. If that new position is within the grid, 
I check: if Walker 1 lands in a cell that’s already been visited by Walker 2 
(i.e., the cell value is 2 or 3), that would be an intersection hense I increment my 
count and I f-string it out. Then I update the grid cell—if it was empty, I mark it 
as visited by Walker 1; if it was previously visited by Walker 2, I mark it as
visited by both (set to 3). Its a similar process for walker 2 I let this go on 
and intersections accumulate.
    
Sources: Lecture content on GitHub, ChatGpt
'''

import numpy as np
import matplotlib.pyplot as p

# Initialize a 200x200 grid. The grid holds:
# 0: unvisited; 1: visited by Walker 1; 2: visited by Walker 2; 3: visited by both.
a = np.zeros((200, 200), dtype=int)
count = 0  # Intersection counter

# Create two walkers with random starting positions in a small region.
walker_1 = np.array([np.random.randint(90, 100), np.random.randint(90, 100)])
walker_2 = np.array([np.random.randint(90, 100), np.random.randint(90, 100)])

# Mark their starting positions on the grid:
a[walker_1[0], walker_1[1]] = 1
a[walker_2[0], walker_2[1]] = 2

# Set up visualization. Using a colormap that shows differences in cell values.
im = p.imshow(a, interpolation='bicubic', cmap='viridis')

# Define possible movement choices (left, down, right, up).
stepChoices = [[-1, 0], [0, -1], [1, 0], [0, 1]]

def run():
    # get our global vars we'll need them
    global walker_1, walker_2, count, a
    while True:
        # move our walker 2 also add to its new position since it changes
        step_1 = np.array(stepChoices[np.random.randint(0, 4)])
        new_pos_1 = walker_1 + step_1
        
        if 0 <= new_pos_1[0] < 200 and 0 <= new_pos_1[1] < 200:
            # If Walker 1 steps into a cell already visited by Walker 2 (value 2 or already 3),
            # count it as an intersection.
            if a[new_pos_1[0], new_pos_1[1]] in [2, 3]:
                count += 1
                print(f"Walker 1 crosses Walker 2's path! Count: {count}")
            
            # Update the cell value:
            # if cell is 0, mark it as visited by Walker 1.
            # if cell is 2, change to 3 (visited by both).
            # if cell is already 1 or 3, leave as is.
            if a[new_pos_1[0], new_pos_1[1]] == 0:
                a[new_pos_1[0], new_pos_1[1]] = 1
            elif a[new_pos_1[0], new_pos_1[1]] == 2:
                a[new_pos_1[0], new_pos_1[1]] = 3
            # (If already 1 or 3, no change needed.)
            
            walker_1 = new_pos_1  # Update Walker 1's position

        # make walker 2 and possible choices
        step_2 = np.array(stepChoices[np.random.randint(0, 4)])
        # add walker_2 plus step 1 as our new position for our walker 2
        new_pos_2 = walker_2 + step_2
        
        if 0 <= new_pos_2[0] < 200 and 0 <= new_pos_2[1] < 200:
            # If Walker 2 steps into a cell already visited by Walker 1 (value 1 or already 3),
            # count it as an intersection.
            if a[new_pos_2[0], new_pos_2[1]] in [1, 3]:
                count += 1
                print(f"Walker 2 crosses Walker 1's path! Count: {count}")
            
            # Update the cell value:
            # if cell is 0, mark it as visited by Walker 2.
            # if cell is 1, change to 3 (visited by both).
            # if cell is already 2 or 3, leave as is.
            if a[new_pos_2[0], new_pos_2[1]] == 0:
                a[new_pos_2[0], new_pos_2[1]] = 2
            elif a[new_pos_2[0], new_pos_2[1]] == 1:
                a[new_pos_2[0], new_pos_2[1]] = 3

            walker_2 = new_pos_2  # Update Walker 2's position

        # visualize it
        im.set_data(a)
        p.draw()
        p.pause(0.001)
